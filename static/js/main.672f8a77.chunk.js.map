{"version":3,"sources":["Splash.js","Header.js","Question.js","QuestionContainer.js","Answer.js","AnswerBank.js","Timer.js","GameStatus.js","App.js","serviceWorker.js","index.js"],"names":["Splash","react_default","a","createElement","className","onClick","this","props","hideSplash","Component","Header","modifyQuestions","getFromLocalStorage","Question","currentQuestion","question","QuestionContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeSlide","e","index","lastIndex","questions","length","currentIndex","state","target","classList","contains","setState","setCurrent","prevProps","_this2","seconds","minutes","Math","floor","correctAnswered","answers","concat","tryAgainClass","src_Question","Answer","handleAnswer","answer","choice","id","disabled","answerType","validateAnswer","AnswerBank","shuffleArray","array","i","j","random","temp","map","Answer_Answer","Timer","GameStatus","incorrectAnswered","src_Timer","App","componentDidMount","fetch","then","data","json","allQuestions","catch","err","console","log","allAnswers","newQuestion","newIndex","_this$state","remainingQuestions","filter","correctCount","incorrectCount","removeFromLocalStorage","saveToLocalStorage","localStorage","setItem","JSON","stringify","incorrectQuestions","parsed","parse","getItem","key","push","removeItem","startTimer","handleInterval","setInterval","tick","time","secondsRemaining","parseInt","min","sec","clearInterval","newStudyQuestions","newStudyAnswers","questionType","indexOf","category","find","showSplash","_this$state2","src_Header","src_GameStatus","QuestionContainer_QuestionContainer","AnswerBank_AnswerBank","Splash_Splash","renderApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.672f8a77.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './styles/main.scss';\n\n\nexport default class Splash extends Component {\n  render() {\n    return (\n      <div className=\"splash-container\">\n        <h1>quiz me</h1>\n        <h3>A Fun Timed Game for Testing Your Javascript Knowledge</h3>\n        <button className=\"splash-btn\" onClick={this.props.hideSplash}>Start!</button>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles/main.scss';\n\nconst Header = (props) => {\n  return (\n    <header>\n      <div className=\"nav-logo\">\n        <ul className=\"nav\">\n          <li>Test your knowledge:</li>\n          <li className=\"navitem Array\" onClick={props.modifyQuestions}>Arrays</li>\n          <li className=\"navitem String\" onClick={props.modifyQuestions}>Strings</li>\n          <li className=\"navitem all\" onClick={props.modifyQuestions}>All</li>\n          <li className=\"navitem incorrect\" onClick={props.getFromLocalStorage}>Incorrectly Answered</li>\n        </ul>\n        <h3 className=\"logo\">quiz me</h3>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n\n\nHeader.propTypes = {\n  modifyQuestions: PropTypes.func,\n  getFromLocalStorage: PropTypes.func\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles/main.scss';\n\nconst Question = (props) => {\n  return (\n    <h4 className=\"current-question\">{props.currentQuestion.question}</h4>\n  ); \n}\n\nexport default Question;\n\n\nQuestion.propTypes = {\n  currentQuestion: PropTypes.object,\n}","import React, { Component } from 'react';\nimport './styles/main.scss';\nimport PropTypes from 'prop-types';\nimport Question from './Question.js'\n\n\nexport default class QuestionContainer extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      currentIndex: 0,\n      currentQuestion: {},\n    };\n  }\n\n  changeSlide = (e) => {\n    const lastIndex = this.props.questions.length - 1;\n    const { currentIndex } = this.state;\n    let index;\n\n    if (e.target.classList.contains('next')) {\n      const shouldResetIndex = currentIndex === lastIndex;\n      index =  shouldResetIndex ? 0 : currentIndex + 1; \n    } else {\n      const shouldResetIndex = currentIndex === 0;\n      index =  shouldResetIndex ? lastIndex : currentIndex - 1;\n    }\n    \n    this.setState({\n      currentIndex: index,\n      currentQuestion: this.props.questions[index]\n    });\n    \n    this.props.setCurrent(this.props.questions[index], index);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentIndex !== prevProps.currentIndex) {\n      this.setState({\n        currentIndex: this.props.currentIndex\n      })\n    }\n  }\n\n  render() {\n    let index = !this.props.questions[this.state.currentIndex] ? 0 : this.state.currentIndex;\n    if ((this.props.seconds === '00' && this.props.minutes === 0) || !this.props.currentQuestion) {\n      return (\n        <div className=\"question-container\">\n          <h2 className=\"your-score\">Your score was { \n            (Math.floor((this.props.correctAnswered / this.props.answers.length) * 100))\n            }%\n          </h2>\n          <button className={`carousel-btn ${this.props.tryAgainClass}`} onClick={this.props.modifyQuestions}>Try Again</button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"question-container\">\n          <Question currentQuestion={this.props.questions[index]} />\n          <div>\n            <button className=\"carousel-btn prev\" onClick={(e)=>this.changeSlide(e)}><i className=\"fas fa-arrow-alt-circle-left prev\"></i>Prev</button>    \n            <button className=\"carousel-btn next\" onClick={(e)=>this.changeSlide(e)}>Next<i className=\"fas fa-arrow-alt-circle-right next\"></i></button>\n          </div>\n        </div>\n      );  \n    }  \n  }\n}\n\n\nQuestionContainer.propTypes = {\n  minutes: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  seconds: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  validateAnswer: PropTypes.func,\n  currentQuestion: PropTypes.object,\n  answers: PropTypes.array,\n  questions: PropTypes.array, \n  correctAnswered: PropTypes.number,\n  modifyQuestions: PropTypes.func,\n  currentIndex: PropTypes.number,\n  setCurrent: PropTypes.func,\n  tryAgainClass: PropTypes.string\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './styles/main.scss';\n\n\nexport default class Answer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answerType: 'answer-btn'\n    }\n  }\n\n  handleAnswer = (answer, e) => {\n    let choice = e.target;\n    if (this.props.currentQuestion.id === answer.id) {\n      choice.disabled = true;\n      this.setState({\n        answerType: 'answer-btn right-answer'\n      })\n    } else {\n      this.setState({\n        answerType: 'answer-btn wrong-answer'\n      })\n    }\n    this.props.validateAnswer(this.props.answer, e)\n  }\n\n componentDidUpdate(prevProps) {\n    if (this.props.seconds !== prevProps.seconds && \n      (this.props.minutes === '4' && this.props.seconds === '00')) {\n      this.setState({\n        answerType: 'answer-btn'\n      })\n    }\n  }\n\n  render() {\n    const { answerType } = this.state;\n    let button;\n    if ((this.props.seconds === '00' && this.props.minutes === 0) || !this.props.currentQuestion) {\n      button = <button className={answerType} disabled={true} onClick={(e)=>this.handleAnswer(this.props.answer, e)}>{this.props.answer.answer}</button>\n    } else if (this.props.seconds === '00' && this.props.minutes === '4') {\n      button = <button className={answerType} disabled={false} onClick={(e)=>this.handleAnswer(this.props.answer, e)}>{this.props.answer.answer}</button>\n    } else {\n      button = <button className={answerType} onClick={(e)=>this.handleAnswer(this.props.answer, e)}>{this.props.answer.answer}</button>\n    }\n    return (button);\n  }\n}\n\n          \nAnswer.propTypes = {\n  minutes: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  seconds: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  validateAnswer: PropTypes.func,\n  currentQuestion: PropTypes.object,\n  answer: PropTypes.object\n}","import React, { Component } from 'react';\nimport Answer from './Answer.js';\nimport PropTypes from 'prop-types';\nimport './styles/main.scss';\n\n\nexport default class AnswerBank extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answers: null\n    }\n  }\n\n  shuffleArray = (array) => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  componentWillMount () {\n    this.setState({ answers: this.shuffleArray(this.props.answers)});\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.answers !== prevProps.answers) {\n      this.setState({\n        answers: this.props.answers\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"answer-wrapper\">\n        <div className=\"answer-container\">\n        {\n          this.state.answers.map(answer => {\n            return <Answer answer={answer} \n                           currentQuestion={this.props.currentQuestion}\n                           validateAnswer={this.props.validateAnswer} \n                           minutes={this.props.minutes}\n                           seconds={this.props.seconds} />\n          })\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\n\nAnswerBank.propTypes = {\n  minutes: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  seconds: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  validateAnswer: PropTypes.func,\n  currentQuestion: PropTypes.object,\n  answers: PropTypes.array\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles/main.scss';\n\n\nconst Timer = (props) => {\n  return (\n    <h2>{props.minutes}:{props.seconds}</h2>\n  );\n}\n\nexport default Timer;\n\n\nTimer.propTypes = {\n   minutes: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n   seconds: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n}\n","import React from 'react';\nimport Timer from './Timer.js';\nimport PropTypes from 'prop-types';\nimport './styles/main.scss';\n\n\nconst GameStatus = (props) => {\n  return (\n    <div className=\"status-container\">\n      <ul className=\"statuses\">\n        <li>\n          <p>Remaining</p>\n          <h2>{props.questions.length}</h2>\n        </li>\n        <li>\n          <p>Correct</p>\n          <h2>{props.correctAnswered}</h2>\n        </li>\n        <li>\n          <p>Incorrect</p>\n          <h2>{props.incorrectAnswered}</h2>\n        </li>\n        <li className=\"score\">\n          <p>Score</p>\n          <h2>{props.correctAnswered}/{props.answers.length}</h2>\n        </li>\n        <li>\n          <p>Timer</p>\n          <Timer minutes={props.minutes}\n                 seconds={props.seconds} />\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default GameStatus;\n\n\nGameStatus.propTypes = {\n   minutes: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n   seconds: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n   questions: PropTypes.arrayOf(PropTypes.object),\n   answers: PropTypes.arrayOf(PropTypes.object),\n   correctAnswered: PropTypes.number,\n   incorrectAnswered: PropTypes.number,\n   tick: PropTypes.func\n}\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Splash from './Splash.js';\nimport Header from './Header.js';\nimport QuestionContainer from './QuestionContainer.js';\nimport AnswerBank from './AnswerBank.js';\nimport GameStatus from './GameStatus.js';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      showSplash: true,\n      allQuestions: [],\n      questions: [],\n      allAnswers: [],\n      answers: [],\n      currentQuestion: {},\n      correctAnswered: 0,\n      incorrectAnswered: 0,\n      currentIndex: 0,\n      incorrectQuestions: [],\n      minutes: '4',\n      seconds: '00'\n    }\n  }\n\n  componentDidMount = () => {\n    fetch(\"http://memoize-datasets.herokuapp.com/api/v1/questions\")\n      .then(data => data.json())\n      .then(data => {\n        this.setState({\n          allQuestions: data.questions,\n          questions: data.questions,\n          currentQuestion: data.questions[0],\n        })\n      })\n      .catch(err => console.log(err))\n\n    fetch(\"http://memoize-datasets.herokuapp.com/api/v1/answers\")\n      .then(data => data.json())\n      .then(data => {\n        this.setState({\n          allAnswers: data.answers,\n          answers: data.answers\n        })\n      })\n      .catch(err => console.log(err))\n  }\n\n  setCurrent = (newQuestion, newIndex) => {\n    this.setState({\n      currentQuestion: newQuestion,\n      currentIndex: newIndex\n    })\n  }\n\n  validateAnswer = (answer,e) => {\n    const { questions, currentQuestion, currentIndex, correctAnswered, \n            incorrectAnswered } = this.state;\n    const remainingQuestions = questions.filter(question => question !== currentQuestion);\n    let index = currentIndex === remainingQuestions.length ? 0 : currentIndex;\n    let correctCount = correctAnswered;\n    let incorrectCount = incorrectAnswered;\n\n    if (currentQuestion.id === answer.id) {\n      correctCount = correctAnswered + 1;\n      this.removeFromLocalStorage(currentQuestion);\n    } else {\n      this.saveToLocalStorage(currentQuestion);\n      incorrectCount = incorrectAnswered + 1;\n    }\n     this.setState({\n      questions: remainingQuestions,\n      currentQuestion: remainingQuestions[index],\n      currentIndex: index,\n      correctAnswered: correctCount,\n      incorrectAnswered: incorrectCount\n    })\n  }\n\n  saveToLocalStorage = (currentQuestion) => {\n    localStorage.setItem(`${currentQuestion.id}`, JSON.stringify(currentQuestion));\n  }\n\n  getFromLocalStorage = () => {\n    let incorrectQuestions = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      let parsed = JSON.parse(localStorage.getItem(localStorage.key(i)))\n      incorrectQuestions.push(parsed)\n    }\n    this.setState({\n      incorrectQuestions: incorrectQuestions   \n    }, this.modifyQuestions)\n  }\n\n  removeFromLocalStorage = (currentQuestion) => {\n    localStorage.removeItem(currentQuestion.id)\n  }\n\n  startTimer = () => {\n    this.handleInterval = setInterval(this.tick, 1000);\n    let time = this.state.minutes;\n    this.secondsRemaining = time * 60 + parseInt(this.state.seconds);\n  }\n\n  tick = () => {\n    let min = Math.floor(this.secondsRemaining / 60);\n    let sec = this.secondsRemaining - (min * 60)\n\n    this.setState({\n      minutes: min,\n      seconds: sec\n    });\n\n    if (sec < 10) {\n      this.setState({\n        seconds: \"0\" + this.state.seconds\n      })\n    }\n    if (min === 0 & sec === 0 || !this.state.questions.length) {\n      clearInterval(this.handleInterval);\n    }\n    this.secondsRemaining--\n  }\n\n  modifyQuestions = (e) => {\n    let newStudyQuestions = this.state.allQuestions;\n    let newStudyAnswers = this.state.allAnswers;\n    let questionType = 'incorrect'\n    if (e) {\n      questionType = e.target.className;\n    }\n\n    if (questionType.indexOf('all') < 0 && questionType.indexOf('incorrect') < 0) {\n      newStudyQuestions = this.state.allQuestions.filter(question => {\n        return questionType.indexOf(question.category) > -1;\n      })\n      newStudyAnswers = this.state.allAnswers.filter(answer => {\n        return questionType.indexOf(answer.category) > -1;\n      })\n    } else if (questionType.indexOf('incorrect') >= 0) {\n        newStudyQuestions = this.state.incorrectQuestions;\n        newStudyAnswers = this.state.allAnswers.filter(answer => {\n          let match = newStudyQuestions.find(question => {\n            return answer.id === question.id;\n          })\n          return match;\n        })\n    }\n\n    this.setState({\n      questions: newStudyQuestions,\n      answers: newStudyAnswers,\n      currentQuestion: newStudyQuestions[0],\n      correctAnswered: 0,\n      incorrectAnswered: 0,\n      currentIndex: 0,\n      minutes: '4',\n      seconds: '00',\n      tryAgainClass: questionType\n    }, this.startTimer) \n\n    clearInterval(this.handleInterval)\n  }\n\n  hideSplash = () => {\n    this.setState({\n      showSplash: false\n    })\n    this.startTimer();\n  }\n  \n  renderApp() {\n    const { questions, answers, currentQuestion, currentIndex, correctAnswered, \n            incorrectAnswered, seconds, minutes, tryAgainClass } = this.state;\n    return (\n        <div className='app-container'>\n          <Header modifyQuestions={this.modifyQuestions} \n                  getFromLocalStorage={this.getFromLocalStorage}/>\n          <GameStatus questions={questions}\n                      answers={answers}\n                      correctAnswered={correctAnswered}\n                      incorrectAnswered={incorrectAnswered}\n                      minutes={minutes}\n                      seconds={seconds}\n                      tick={this.tick} />\n          <QuestionContainer questions={questions} \n                             answers={answers}\n                             currentQuestion={currentQuestion}\n                             correctAnswered={correctAnswered}\n                             modifyQuestions={this.modifyQuestions}\n                             currentIndex={currentIndex}\n                             setCurrent={this.setCurrent}\n                             minutes={minutes}\n                             seconds={seconds} \n                             tryAgainClass={tryAgainClass}/>\n          <AnswerBank answers={answers}\n                      validateAnswer={this.validateAnswer}\n                      currentQuestion={currentQuestion}\n                      minutes={minutes}\n                      seconds={seconds} />\n        </div>\n      )\n  }\n\n  render() {\n    return (\n      this.state.showSplash ? <Splash hideSplash={this.hideSplash} /> : this.renderApp()     \n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}